{"ast":null,"code":"/**\n * @license Angular v7.2.16\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { __decorate, __metadata, __spread, __extends, __read } from 'tslib';\nimport { Injectable, NgModule, Version } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ÉµgetDOM } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar BrowserXhr = /** @class */function () {\n  function BrowserXhr() {}\n  BrowserXhr.prototype.build = function () {\n    return new XMLHttpRequest();\n  };\n  BrowserXhr = __decorate([Injectable(), __metadata(\"design:paramtypes\", [])], BrowserXhr);\n  return BrowserXhr;\n}();\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Supported http methods.\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar RequestMethod;\n(function (RequestMethod) {\n  RequestMethod[RequestMethod[\"Get\"] = 0] = \"Get\";\n  RequestMethod[RequestMethod[\"Post\"] = 1] = \"Post\";\n  RequestMethod[RequestMethod[\"Put\"] = 2] = \"Put\";\n  RequestMethod[RequestMethod[\"Delete\"] = 3] = \"Delete\";\n  RequestMethod[RequestMethod[\"Options\"] = 4] = \"Options\";\n  RequestMethod[RequestMethod[\"Head\"] = 5] = \"Head\";\n  RequestMethod[RequestMethod[\"Patch\"] = 6] = \"Patch\";\n})(RequestMethod || (RequestMethod = {}));\n/**\n * All possible states in which a connection can be, based on\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\n * additional \"CANCELLED\" state.\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar ReadyState;\n(function (ReadyState) {\n  ReadyState[ReadyState[\"Unsent\"] = 0] = \"Unsent\";\n  ReadyState[ReadyState[\"Open\"] = 1] = \"Open\";\n  ReadyState[ReadyState[\"HeadersReceived\"] = 2] = \"HeadersReceived\";\n  ReadyState[ReadyState[\"Loading\"] = 3] = \"Loading\";\n  ReadyState[ReadyState[\"Done\"] = 4] = \"Done\";\n  ReadyState[ReadyState[\"Cancelled\"] = 5] = \"Cancelled\";\n})(ReadyState || (ReadyState = {}));\n/**\n * Acceptable response types to be associated with a {@link Response}, based on\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar ResponseType;\n(function (ResponseType) {\n  ResponseType[ResponseType[\"Basic\"] = 0] = \"Basic\";\n  ResponseType[ResponseType[\"Cors\"] = 1] = \"Cors\";\n  ResponseType[ResponseType[\"Default\"] = 2] = \"Default\";\n  ResponseType[ResponseType[\"Error\"] = 3] = \"Error\";\n  ResponseType[ResponseType[\"Opaque\"] = 4] = \"Opaque\";\n})(ResponseType || (ResponseType = {}));\n/**\n * Supported content type to be automatically associated with a {@link Request}.\n * @deprecated see https://angular.io/guide/http\n */\nvar ContentType;\n(function (ContentType) {\n  ContentType[ContentType[\"NONE\"] = 0] = \"NONE\";\n  ContentType[ContentType[\"JSON\"] = 1] = \"JSON\";\n  ContentType[ContentType[\"FORM\"] = 2] = \"FORM\";\n  ContentType[ContentType[\"FORM_DATA\"] = 3] = \"FORM_DATA\";\n  ContentType[ContentType[\"TEXT\"] = 4] = \"TEXT\";\n  ContentType[ContentType[\"BLOB\"] = 5] = \"BLOB\";\n  ContentType[ContentType[\"ARRAY_BUFFER\"] = 6] = \"ARRAY_BUFFER\";\n})(ContentType || (ContentType = {}));\n/**\n * Define which buffer to use to store the response\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar ResponseContentType;\n(function (ResponseContentType) {\n  ResponseContentType[ResponseContentType[\"Text\"] = 0] = \"Text\";\n  ResponseContentType[ResponseContentType[\"Json\"] = 1] = \"Json\";\n  ResponseContentType[ResponseContentType[\"ArrayBuffer\"] = 2] = \"ArrayBuffer\";\n  ResponseContentType[ResponseContentType[\"Blob\"] = 3] = \"Blob\";\n})(ResponseContentType || (ResponseContentType = {}));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Headers} from '@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar Headers = /** @class */function () {\n  // TODO(vicb): any -> string|string[]\n  function Headers(headers) {\n    var _this = this;\n    /** @internal header names are lower case */\n    this._headers = new Map();\n    /** @internal map lower case names to actual names */\n    this._normalizedNames = new Map();\n    if (!headers) {\n      return;\n    }\n    if (headers instanceof Headers) {\n      headers.forEach(function (values, name) {\n        values.forEach(function (value) {\n          return _this.append(name, value);\n        });\n      });\n      return;\n    }\n    Object.keys(headers).forEach(function (name) {\n      var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      _this.delete(name);\n      values.forEach(function (value) {\n        return _this.append(name, value);\n      });\n    });\n  }\n  /**\n   * Returns a new Headers instance from the given DOMString of Response Headers\n   */\n  Headers.fromResponseHeaderString = function (headersString) {\n    var headers = new Headers();\n    headersString.split('\\n').forEach(function (line) {\n      var index = line.indexOf(':');\n      if (index > 0) {\n        var name_1 = line.slice(0, index);\n        var value = line.slice(index + 1).trim();\n        headers.set(name_1, value);\n      }\n    });\n    return headers;\n  };\n  /**\n   * Appends a header to existing list of header values for a given header name.\n   */\n  Headers.prototype.append = function (name, value) {\n    var values = this.getAll(name);\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  };\n  /**\n   * Deletes all header values for the given name.\n   */\n  Headers.prototype.delete = function (name) {\n    var lcName = name.toLowerCase();\n    this._normalizedNames.delete(lcName);\n    this._headers.delete(lcName);\n  };\n  Headers.prototype.forEach = function (fn) {\n    var _this = this;\n    this._headers.forEach(function (values, lcName) {\n      return fn(values, _this._normalizedNames.get(lcName), _this._headers);\n    });\n  };\n  /**\n   * Returns first header that matches given name.\n   */\n  Headers.prototype.get = function (name) {\n    var values = this.getAll(name);\n    if (values === null) {\n      return null;\n    }\n    return values.length > 0 ? values[0] : null;\n  };\n  /**\n   * Checks for existence of header by given name.\n   */\n  Headers.prototype.has = function (name) {\n    return this._headers.has(name.toLowerCase());\n  };\n  /**\n   * Returns the names of the headers\n   */\n  Headers.prototype.keys = function () {\n    return Array.from(this._normalizedNames.values());\n  };\n  /**\n   * Sets or overrides header value for given name.\n   */\n  Headers.prototype.set = function (name, value) {\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n    this.mayBeSetNormalizedName(name);\n  };\n  /**\n   * Returns values of all headers.\n   */\n  Headers.prototype.values = function () {\n    return Array.from(this._headers.values());\n  };\n  /**\n   * Returns string of all headers.\n   */\n  // TODO(vicb): returns {[name: string]: string[]}\n  Headers.prototype.toJSON = function () {\n    var _this = this;\n    var serialized = {};\n    this._headers.forEach(function (values, name) {\n      var split = [];\n      values.forEach(function (v) {\n        return split.push.apply(split, __spread(v.split(',')));\n      });\n      serialized[_this._normalizedNames.get(name)] = split;\n    });\n    return serialized;\n  };\n  /**\n   * Returns list of header values for a given name.\n   */\n  Headers.prototype.getAll = function (name) {\n    return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n  };\n  /**\n   * This method is not implemented.\n   */\n  Headers.prototype.entries = function () {\n    throw new Error('\"entries\" method is not implemented on Headers class');\n  };\n  Headers.prototype.mayBeSetNormalizedName = function (name) {\n    var lcName = name.toLowerCase();\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  };\n  return Headers;\n}();\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {@link Response Responses} for\n * mock responses (see {@link MockBackend}).\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import {ResponseOptions, Response} from '@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar ResponseOptions = /** @class */function () {\n  function ResponseOptions(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var body = opts.body,\n      status = opts.status,\n      headers = opts.headers,\n      statusText = opts.statusText,\n      type = opts.type,\n      url = opts.url;\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n  /**\n   * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n   * override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * This may be useful when sharing a base `ResponseOptions` object inside tests,\n   * where certain properties may change from test to test.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * import {ResponseOptions, Response} from '@angular/http';\n   *\n   * var options = new ResponseOptions({\n   *   body: {name: 'Jeff'}\n   * });\n   * var res = new Response(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('options.url:', options.url); // null\n   * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n   * console.log('res.url:', res.url); // https://google.com\n   * ```\n   */\n  ResponseOptions.prototype.merge = function (options) {\n    return new ResponseOptions({\n      body: options && options.body != null ? options.body : this.body,\n      status: options && options.status != null ? options.status : this.status,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      statusText: options && options.statusText != null ? options.statusText : this.statusText,\n      type: options && options.type != null ? options.type : this.type,\n      url: options && options.url != null ? options.url : this.url\n    });\n  };\n  return ResponseOptions;\n}();\n/**\n * Subclass of {@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link ResponseOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create {@link Response Responses}.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import {provide} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {@link Response}\n * object.\n *\n * ### Example\n *\n * ```\n * import {BaseResponseOptions, Response} from '@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar BaseResponseOptions = /** @class */function (_super) {\n  __extends(BaseResponseOptions, _super);\n  function BaseResponseOptions() {\n    return _super.call(this, {\n      status: 200,\n      statusText: 'Ok',\n      type: ResponseType.Default,\n      headers: new Headers()\n    }) || this;\n  }\n  BaseResponseOptions = __decorate([Injectable(), __metadata(\"design:paramtypes\", [])], BaseResponseOptions);\n  return BaseResponseOptions;\n}(ResponseOptions);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {@link Request}.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar ConnectionBackend = /** @class */function () {\n  function ConnectionBackend() {}\n  return ConnectionBackend;\n}();\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar Connection = /** @class */function () {\n  function Connection() {}\n  return Connection;\n}();\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar XSRFStrategy = /** @class */function () {\n  function XSRFStrategy() {}\n  return XSRFStrategy;\n}();\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction normalizeMethodName(method) {\n  if (typeof method !== 'string') return method;\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n}\nvar isSuccess = function (status) {\n  return status >= 200 && status < 300;\n};\nfunction getResponseURL(xhr) {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\nfunction stringToArrayBuffer(input) {\n  var view = new Uint16Array(input.length);\n  for (var i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction paramParser(rawParams) {\n  if (rawParams === void 0) {\n    rawParams = '';\n  }\n  var map = new Map();\n  if (rawParams.length > 0) {\n    var params = rawParams.split('&');\n    params.forEach(function (param) {\n      var eqIdx = param.indexOf('=');\n      var _a = __read(eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], 2),\n        key = _a[0],\n        val = _a[1];\n      var list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n **/\nvar QueryEncoder = /** @class */function () {\n  function QueryEncoder() {}\n  QueryEncoder.prototype.encodeKey = function (key) {\n    return standardEncoding(key);\n  };\n  QueryEncoder.prototype.encodeValue = function (value) {\n    return standardEncoding(value);\n  };\n  return QueryEncoder;\n}();\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar URLSearchParams = /** @class */function () {\n  function URLSearchParams(rawParams, queryEncoder) {\n    if (rawParams === void 0) {\n      rawParams = '';\n    }\n    if (queryEncoder === void 0) {\n      queryEncoder = new QueryEncoder();\n    }\n    this.rawParams = rawParams;\n    this.queryEncoder = queryEncoder;\n    this.paramsMap = paramParser(rawParams);\n  }\n  URLSearchParams.prototype.clone = function () {\n    var clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  };\n  URLSearchParams.prototype.has = function (param) {\n    return this.paramsMap.has(param);\n  };\n  URLSearchParams.prototype.get = function (param) {\n    var storedParam = this.paramsMap.get(param);\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  };\n  URLSearchParams.prototype.getAll = function (param) {\n    return this.paramsMap.get(param) || [];\n  };\n  URLSearchParams.prototype.set = function (param, val) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    var list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  };\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  URLSearchParams.prototype.setAll = function (searchParams) {\n    var _this = this;\n    searchParams.paramsMap.forEach(function (value, param) {\n      var list = _this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      _this.paramsMap.set(param, list);\n    });\n  };\n  URLSearchParams.prototype.append = function (param, val) {\n    if (val === void 0 || val === null) return;\n    var list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  };\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `append(name, value)`\n  // for each value in `values`.\n  //\n  // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  URLSearchParams.prototype.appendAll = function (searchParams) {\n    var _this = this;\n    searchParams.paramsMap.forEach(function (value, param) {\n      var list = _this.paramsMap.get(param) || [];\n      for (var i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      _this.paramsMap.set(param, list);\n    });\n  };\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `delete(name)`,\n  // followed by `set(name, values)`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  URLSearchParams.prototype.replaceAll = function (searchParams) {\n    var _this = this;\n    searchParams.paramsMap.forEach(function (value, param) {\n      var list = _this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (var i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      _this.paramsMap.set(param, list);\n    });\n  };\n  URLSearchParams.prototype.toString = function () {\n    var _this = this;\n    var paramsList = [];\n    this.paramsMap.forEach(function (values, k) {\n      values.forEach(function (v) {\n        return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v));\n      });\n    });\n    return paramsList.join('&');\n  };\n  URLSearchParams.prototype.delete = function (param) {\n    this.paramsMap.delete(param);\n  };\n  return URLSearchParams;\n}();\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * HTTP request body used by both {@link Request} and {@link Response}\n * https://fetch.spec.whatwg.org/#body\n */\nvar Body = /** @class */function () {\n  function Body() {}\n  /**\n   * Attempts to return body as parsed `JSON` object, or raises an exception.\n   */\n  Body.prototype.json = function () {\n    if (typeof this._body === 'string') {\n      return JSON.parse(this._body);\n    }\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n    return this._body;\n  };\n  /**\n   * Returns the body as a string, presuming `toString()` can be called on the response body.\n   *\n   * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n   * bytes in the buffer will be interpreted. Valid values are:\n   *\n   * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n   *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n   *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n   *   into consideration. This is the default behavior to avoid breaking apps, but should be\n   *   considered deprecated.\n   *\n   * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n   */\n  Body.prototype.text = function (encodingHint) {\n    if (encodingHint === void 0) {\n      encodingHint = 'legacy';\n    }\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n    if (this._body instanceof ArrayBuffer) {\n      switch (encodingHint) {\n        case 'legacy':\n          return String.fromCharCode.apply(null, new Uint16Array(this._body));\n        case 'iso-8859':\n          return String.fromCharCode.apply(null, new Uint8Array(this._body));\n        default:\n          throw new Error(\"Invalid value for encodingHint: \" + encodingHint);\n      }\n    }\n    if (this._body == null) {\n      return '';\n    }\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n    return this._body.toString();\n  };\n  /**\n   * Return the body as an ArrayBuffer\n   */\n  Body.prototype.arrayBuffer = function () {\n    if (this._body instanceof ArrayBuffer) {\n      return this._body;\n    }\n    return stringToArrayBuffer(this.text());\n  };\n  /**\n    * Returns the request's body as a Blob, assuming that body exists.\n    */\n  Body.prototype.blob = function () {\n    if (this._body instanceof Blob) {\n      return this._body;\n    }\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  };\n  return Body;\n}();\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar Response = /** @class */function (_super) {\n  __extends(Response, _super);\n  function Response(responseOptions) {\n    var _this = _super.call(this) || this;\n    _this._body = responseOptions.body;\n    _this.status = responseOptions.status;\n    _this.ok = _this.status >= 200 && _this.status <= 299;\n    _this.statusText = responseOptions.statusText;\n    _this.headers = responseOptions.headers;\n    _this.type = responseOptions.type;\n    _this.url = responseOptions.url;\n    return _this;\n  }\n  Response.prototype.toString = function () {\n    return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n  };\n  return Response;\n}(Body);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextRequestId = 0;\nvar JSONP_HOME = '__ng_jsonp__';\nvar _jsonpConnections = null;\nfunction _getJsonpConnections() {\n  var w = typeof window == 'object' ? window : {};\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n  return _jsonpConnections;\n}\n// Make sure not to evaluate this in a non-browser environment!\nvar BrowserJsonp = /** @class */function () {\n  function BrowserJsonp() {}\n  // Construct a <script> element with the specified URL\n  BrowserJsonp.prototype.build = function (url) {\n    var node = document.createElement('script');\n    node.src = url;\n    return node;\n  };\n  BrowserJsonp.prototype.nextRequestID = function () {\n    return \"__req\" + _nextRequestId++;\n  };\n  BrowserJsonp.prototype.requestCallback = function (id) {\n    return JSONP_HOME + \".\" + id + \".finished\";\n  };\n  BrowserJsonp.prototype.exposeConnection = function (id, connection) {\n    var connections = _getJsonpConnections();\n    connections[id] = connection;\n  };\n  BrowserJsonp.prototype.removeConnection = function (id) {\n    var connections = _getJsonpConnections();\n    connections[id] = null;\n  };\n  // Attach the <script> element to the DOM\n  BrowserJsonp.prototype.send = function (node) {\n    document.body.appendChild(node);\n  };\n  // Remove <script> element from the DOM\n  BrowserJsonp.prototype.cleanup = function (node) {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  };\n  BrowserJsonp = __decorate([Injectable()], BrowserJsonp);\n  return BrowserJsonp;\n}();\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar JSONPConnection = /** @class */function () {\n  /** @internal */\n  function JSONPConnection(req, _dom, baseResponseOptions) {\n    var _this = this;\n    this._dom = _dom;\n    this.baseResponseOptions = baseResponseOptions;\n    this._finished = false;\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n    this.request = req;\n    this.response = new Observable(function (responseObserver) {\n      _this.readyState = ReadyState.Loading;\n      var id = _this._id = _dom.nextRequestID();\n      _dom.exposeConnection(id, _this);\n      // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n      var callback = _dom.requestCallback(_this._id);\n      var url = req.url;\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n      }\n      var script = _this._script = _dom.build(url);\n      var onLoad = function (event) {\n        if (_this.readyState === ReadyState.Cancelled) return;\n        _this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        if (!_this._finished) {\n          var responseOptions_1 = new ResponseOptions({\n            body: JSONP_ERR_NO_CALLBACK,\n            type: ResponseType.Error,\n            url: url\n          });\n          if (baseResponseOptions) {\n            responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n          }\n          responseObserver.error(new Response(responseOptions_1));\n          return;\n        }\n        var responseOptions = new ResponseOptions({\n          body: _this._responseData,\n          url: url\n        });\n        if (_this.baseResponseOptions) {\n          responseOptions = _this.baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n      var onError = function (error) {\n        if (_this.readyState === ReadyState.Cancelled) return;\n        _this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        var responseOptions = new ResponseOptions({\n          body: error.message,\n          type: ResponseType.Error\n        });\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n      _dom.send(script);\n      return function () {\n        _this.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n        _this._dom.cleanup(script);\n      };\n    });\n  }\n  /**\n   * Callback called when the JSONP request completes, to notify the application\n   * of the new data.\n   */\n  JSONPConnection.prototype.finished = function (data) {\n    // Don't leak connections\n    this._finished = true;\n    this._dom.removeConnection(this._id);\n    if (this.readyState === ReadyState.Cancelled) return;\n    this._responseData = data;\n  };\n  return JSONPConnection;\n}();\n/**\n * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar JSONPBackend = /** @class */function (_super) {\n  __extends(JSONPBackend, _super);\n  /** @internal */\n  function JSONPBackend(_browserJSONP, _baseResponseOptions) {\n    var _this = _super.call(this) || this;\n    _this._browserJSONP = _browserJSONP;\n    _this._baseResponseOptions = _baseResponseOptions;\n    return _this;\n  }\n  JSONPBackend.prototype.createConnection = function (request) {\n    return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n  };\n  JSONPBackend = __decorate([Injectable(), __metadata(\"design:paramtypes\", [BrowserJsonp, ResponseOptions])], JSONPBackend);\n  return JSONPBackend;\n}(ConnectionBackend);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {@link MockConnection} may be interacted with in tests.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar XHRConnection = /** @class */function () {\n  function XHRConnection(req, browserXHR, baseResponseOptions) {\n    var _this = this;\n    this.request = req;\n    this.response = new Observable(function (responseObserver) {\n      var _xhr = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      var onLoad = function () {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        var status = _xhr.status === 1223 ? 204 : _xhr.status;\n        var body = null;\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = typeof _xhr.response === 'undefined' ? _xhr.responseText : _xhr.response;\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n        var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        var url = getResponseURL(_xhr) || req.url;\n        var statusText = _xhr.statusText || 'OK';\n        var responseOptions = new ResponseOptions({\n          body: body,\n          status: status,\n          headers: headers,\n          statusText: statusText,\n          url: url\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        var response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      var onError = function (err) {\n        var responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n      _this.setDetectedContentType(req, _xhr);\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach(function (values, name) {\n        return _xhr.setRequestHeader(name, values.join(','));\n      });\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n      _xhr.send(_this.request.getBody());\n      return function () {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n  XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        var blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  };\n  return XHRConnection;\n}();\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar CookieXSRFStrategy = /** @class */function () {\n  function CookieXSRFStrategy(_cookieName, _headerName) {\n    if (_cookieName === void 0) {\n      _cookieName = 'XSRF-TOKEN';\n    }\n    if (_headerName === void 0) {\n      _headerName = 'X-XSRF-TOKEN';\n    }\n    this._cookieName = _cookieName;\n    this._headerName = _headerName;\n  }\n  CookieXSRFStrategy.prototype.configureRequest = function (req) {\n    var xsrfToken = ÉµgetDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  };\n  return CookieXSRFStrategy;\n}();\n/**\n * Creates {@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\n * @Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar XHRBackend = /** @class */function () {\n  function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n    this._browserXHR = _browserXHR;\n    this._baseResponseOptions = _baseResponseOptions;\n    this._xsrfStrategy = _xsrfStrategy;\n  }\n  XHRBackend.prototype.createConnection = function (request) {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  };\n  XHRBackend = __decorate([Injectable(), __metadata(\"design:paramtypes\", [BrowserXhr, ResponseOptions, XSRFStrategy])], XHRBackend);\n  return XHRBackend;\n}();\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar RequestOptions = /** @class */function () {\n  // TODO(Dzmitry): remove search when this.search is removed\n  function RequestOptions(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var method = opts.method,\n      headers = opts.headers,\n      body = opts.body,\n      url = opts.url,\n      search = opts.search,\n      params = opts.params,\n      withCredentials = opts.withCredentials,\n      responseType = opts.responseType;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n  Object.defineProperty(RequestOptions.prototype, \"search\", {\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     */\n    get: function () {\n      return this.params;\n    },\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     */\n    set: function (params) {\n      this.params = params;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * Note that `headers` and `search` will override existing values completely if present in\n   * the `options` object. If these values should be merged, it should be done prior to calling\n   * `merge` on the `RequestOptions` instance.\n   *\n   * ```typescript\n   * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n   *\n   * const options = new RequestOptions({\n   *   method: RequestMethod.Post\n   * });\n   * const req = new Request(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('req.method:', RequestMethod[req.method]); // Post\n   * console.log('options.url:', options.url); // null\n   * console.log('req.url:', req.url); // https://google.com\n   * ```\n   */\n  RequestOptions.prototype.merge = function (options) {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials : this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType : this.responseType\n    });\n  };\n  RequestOptions.prototype._mergeSearchParams = function (params) {\n    if (!params) return this.params;\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n    return this._parseParams(params);\n  };\n  RequestOptions.prototype._parseParams = function (objParams) {\n    var _this = this;\n    if (objParams === void 0) {\n      objParams = {};\n    }\n    var params = new URLSearchParams();\n    Object.keys(objParams).forEach(function (key) {\n      var value = objParams[key];\n      if (Array.isArray(value)) {\n        value.forEach(function (item) {\n          return _this._appendParam(key, item, params);\n        });\n      } else {\n        _this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  };\n  RequestOptions.prototype._appendParam = function (key, value, params) {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    params.append(key, value);\n  };\n  return RequestOptions;\n}();\n/**\n * Subclass of {@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {@link RequestMethod RequestMethod.Get}\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link RequestOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create and send {@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar BaseRequestOptions = /** @class */function (_super) {\n  __extends(BaseRequestOptions, _super);\n  function BaseRequestOptions() {\n    return _super.call(this, {\n      method: RequestMethod.Get,\n      headers: new Headers()\n    }) || this;\n  }\n  BaseRequestOptions = __decorate([Injectable(), __metadata(\"design:paramtypes\", [])], BaseRequestOptions);\n  return BaseRequestOptions;\n}(RequestOptions);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jeffbcross): properly implement body accessors\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {@link Http} and\n * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\n *\n * @Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar Request = /** @class */function (_super) {\n  __extends(Request, _super);\n  function Request(requestOptions) {\n    var _this = _super.call(this) || this;\n    // TODO: assert that url is present\n    var url = requestOptions.url;\n    _this.url = requestOptions.url;\n    var paramsArg = requestOptions.params || requestOptions.search;\n    if (paramsArg) {\n      var params = void 0;\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n      if (params.length > 0) {\n        var prefix = '?';\n        if (_this.url.indexOf('?') != -1) {\n          prefix = _this.url[_this.url.length - 1] == '&' ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        _this.url = url + prefix + params;\n      }\n    }\n    _this._body = requestOptions.body;\n    _this.method = normalizeMethodName(requestOptions.method);\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    _this.headers = new Headers(requestOptions.headers);\n    _this.contentType = _this.detectContentType();\n    _this.withCredentials = requestOptions.withCredentials;\n    _this.responseType = requestOptions.responseType;\n    return _this;\n  }\n  /**\n   * Returns the content type enum based on header options.\n   */\n  Request.prototype.detectContentType = function () {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n      case 'application/octet-stream':\n        return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  };\n  /**\n   * Returns the content type of request's body based on its type.\n   */\n  Request.prototype.detectContentTypeFromBody = function () {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob$1) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer$1) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body === 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  };\n  /**\n   * Returns the request's body according to its type. If body is undefined, return\n   * null.\n   */\n  Request.prototype.getBody = function () {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  };\n  return Request;\n}(Body);\nfunction urlEncodeParams(params) {\n  var searchParams = new URLSearchParams();\n  Object.keys(params).forEach(function (key) {\n    var value = params[key];\n    if (value && Array.isArray(value)) {\n      value.forEach(function (element) {\n        return searchParams.append(key, element.toString());\n      });\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\nvar noop = function () {};\nvar w = typeof window == 'object' ? window : noop;\nvar FormData = w /** TODO #9100 */['FormData'] || noop;\nvar Blob$1 = w /** TODO #9100 */['Blob'] || noop;\nvar ArrayBuffer$1 = w /** TODO #9100 */['ArrayBuffer'] || noop;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction httpRequest(backend, request) {\n  return backend.createConnection(request).response;\n}\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n  var newOptions = defaultOpts;\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      params: providedOpts.params,\n      headers: providedOpts.headers,\n      body: providedOpts.body,\n      withCredentials: providedOpts.withCredentials,\n      responseType: providedOpts.responseType\n    }));\n  }\n  return newOptions.merge(new RequestOptions({\n    method: method,\n    url: url\n  }));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {@link Response} when a\n * response is received.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '@angular/http';\n * import {map} from 'rxjs/operators';\n *\n * @Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .pipe(map(res => res.json()))\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '@angular/http';\n * import {MockBackend} from '@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar Http = /** @class */function () {\n  function Http(_backend, _defaultOptions) {\n    this._backend = _backend;\n    this._defaultOptions = _defaultOptions;\n  }\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {@link BaseRequestOptions} before performing the request.\n   */\n  Http.prototype.request = function (url, options) {\n    var responseObservable;\n    if (typeof url === 'string') {\n      responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  };\n  /**\n   * Performs a request with `get` http method.\n   */\n  Http.prototype.get = function (url, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n  };\n  /**\n   * Performs a request with `post` http method.\n   */\n  Http.prototype.post = function (url, body, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n      body: body\n    })), options, RequestMethod.Post, url)));\n  };\n  /**\n   * Performs a request with `put` http method.\n   */\n  Http.prototype.put = function (url, body, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n      body: body\n    })), options, RequestMethod.Put, url)));\n  };\n  /**\n   * Performs a request with `delete` http method.\n   */\n  Http.prototype.delete = function (url, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n  };\n  /**\n   * Performs a request with `patch` http method.\n   */\n  Http.prototype.patch = function (url, body, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n      body: body\n    })), options, RequestMethod.Patch, url)));\n  };\n  /**\n   * Performs a request with `head` http method.\n   */\n  Http.prototype.head = function (url, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n  };\n  /**\n   * Performs a request with `options` http method.\n   */\n  Http.prototype.options = function (url, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n  };\n  Http = __decorate([Injectable(), __metadata(\"design:paramtypes\", [ConnectionBackend, RequestOptions])], Http);\n  return Http;\n}();\n/**\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar Jsonp = /** @class */function (_super) {\n  __extends(Jsonp, _super);\n  function Jsonp(backend, defaultOptions) {\n    return _super.call(this, backend, defaultOptions) || this;\n  }\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {@link BaseRequestOptions} before performing the request.\n   *\n   * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n   * supported by all current browsers. Because JSONP creates a `<script>` element with\n   * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n   * source could expose your application to XSS risks. Data exposed by JSONP may also be\n   * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n   * future security issues (e.g. content sniffing).  For more detail, see the\n   * [Security Guide](http://g.co/ng/security).\n   */\n  Jsonp.prototype.request = function (url, options) {\n    var responseObservable;\n    if (typeof url === 'string') {\n      url = new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url));\n    }\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        throw new Error('JSONP requests must use GET request method.');\n      }\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  };\n  Jsonp = __decorate([Injectable(), __metadata(\"design:paramtypes\", [ConnectionBackend, RequestOptions])], Jsonp);\n  return Jsonp;\n}(Http);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\nfunction httpFactory(xhrBackend, requestOptions) {\n  return new Http(xhrBackend, requestOptions);\n}\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar HttpModule = /** @class */function () {\n  function HttpModule() {}\n  HttpModule = __decorate([NgModule({\n    providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {\n      provide: Http,\n      useFactory: httpFactory,\n      deps: [XHRBackend, RequestOptions]\n    }, BrowserXhr, {\n      provide: RequestOptions,\n      useClass: BaseRequestOptions\n    }, {\n      provide: ResponseOptions,\n      useClass: BaseResponseOptions\n    }, XHRBackend, {\n      provide: XSRFStrategy,\n      useFactory: _createDefaultCookieXSRFStrategy\n    }]\n  })], HttpModule);\n  return HttpModule;\n}();\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated see https://angular.io/api/common/http/HttpClient#jsonp\n * @publicApi\n */\nvar JsonpModule = /** @class */function () {\n  function JsonpModule() {}\n  JsonpModule = __decorate([NgModule({\n    providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {\n      provide: Jsonp,\n      useFactory: jsonpFactory,\n      deps: [JSONPBackend, RequestOptions]\n    }, BrowserJsonp, {\n      provide: RequestOptions,\n      useClass: BaseRequestOptions\n    }, {\n      provide: ResponseOptions,\n      useClass: BaseResponseOptions\n    }, JSONPBackend]\n  })], JsonpModule);\n  return JsonpModule;\n}();\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nvar VERSION = new Version('7.2.16');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserJsonp as Éµangular_packages_http_http_e, Body as Éµangular_packages_http_http_f, _createDefaultCookieXSRFStrategy as Éµangular_packages_http_http_a, httpFactory as Éµangular_packages_http_http_b, jsonpFactory as Éµangular_packages_http_http_c, BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION };","map":{"version":3,"mappings":"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","names":["BrowserXhr","XMLHttpRequest","Injectable","RequestMethod","ReadyState","ResponseType","ContentType","ResponseContentType","headers","Map","Headers","forEach","values","name","append","value","Object","keys","Array","isArray","_this","delete","headersString","split","index","line","indexOf","name_1","slice","trim","set","getAll","push","lcName","toLowerCase","_normalizedNames","_headers","fn","get","length","has","from","join","mayBeSetNormalizedName","serialized","v","Error","opts","status","statusText","type","url","body","ResponseOptions","options","tslib_1.__extends","_super","Default","BaseResponseOptions","normalizeMethodName","method","toUpperCase","Get","Post","Put","Delete","Options","Head","Patch","isSuccess","getResponseURL","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","stringToArrayBuffer","input","view","Uint16Array","i","strLen","charCodeAt","buffer","paramParser","rawParams","map","params","param","eqIdx","key","val","list","QueryEncoder","standardEncoding","encodeURIComponent","replace","queryEncoder","paramsMap","URLSearchParams","clone","appendAll","storedParam","searchParams","paramsList","k","encodeKey","encodeValue","Body","_body","JSON","parse","ArrayBuffer","text","encodingHint","toString","String","fromCharCode","apply","Uint8Array","stringify","Blob","responseOptions","ok","Response","_nextRequestId","JSONP_HOME","_jsonpConnections","_getJsonpConnections","w","window","BrowserJsonp","node","document","createElement","src","id","connection","connections","appendChild","parentNode","removeChild","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","req","_dom","baseResponseOptions","TypeError","request","response","Observable","responseObserver","readyState","Loading","_id","nextRequestID","exposeConnection","callback","requestCallback","lastIndexOf","substring","script","_script","build","onLoad","event","Cancelled","Done","cleanup","_finished","responseOptions_1","merge","error","_responseData","next","complete","onError","message","addEventListener","send","removeEventListener","JSONPConnection","data","removeConnection","_browserJSONP","_baseResponseOptions","JSONPBackend","ConnectionBackend","XSSI_PREFIX","browserXHR","_xhr","open","withCredentials","responseText","fromResponseHeaderString","err","setDetectedContentType","setRequestHeader","responseType","Json","Text","getBody","abort","XHRConnection","contentType","NONE","FORM","TEXT","BLOB","blob","_cookieName","_headerName","CookieXSRFStrategy","xsrfToken","getDOM","getCookie","_browserXHR","_xsrfStrategy","XHRBackend","configureRequest","XSRFStrategy","search","_mergeSearchParams","RequestOptions","_parseParams","objParams","item","_appendParam","BaseRequestOptions","requestOptions","paramsArg","urlEncodeParams","prefix","detectContentType","Request","FORM_DATA","ARRAY_BUFFER","detectContentTypeFromBody","FormData","arrayBuffer","element","noop","httpRequest","backend","createConnection","mergeOptions","defaultOpts","providedOpts","newOptions","_backend","_defaultOptions","Http","responseObservable","defaultOptions","Jsonp","_createDefaultCookieXSRFStrategy","httpFactory","xhrBackend","jsonpFactory","jsonpBackend","HttpModule","NgModule","providers","provide","useFactory","deps","useClass","JsonpModule","VERSION","Version"],"sources":["/Users/packages/http/src/backends/browser_xhr.ts","/Users/packages/http/src/enums.ts","/Users/packages/http/src/headers.ts","/Users/packages/http/src/base_response_options.ts","/Users/packages/http/src/interfaces.ts","/Users/packages/http/src/http_utils.ts","/Users/packages/http/src/url_search_params.ts","/Users/packages/http/src/body.ts","/Users/packages/http/src/static_response.ts","/Users/packages/http/src/backends/browser_jsonp.ts","/Users/packages/http/src/backends/jsonp_backend.ts","/Users/packages/http/src/backends/xhr_backend.ts","/Users/packages/http/src/base_request_options.ts","/Users/packages/http/src/static_request.ts","/Users/packages/http/src/http.ts","/Users/packages/http/src/http_module.ts","/Users/packages/http/src/version.ts","/Users/packages/http/src/index.ts","/Users/packages/http/public_api.ts","/Users/packages/http/index.ts","/Users/packages/http/http.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class BrowserXhr {\n  constructor() {}\n  build(): any { return <any>(new XMLHttpRequest()); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Supported http methods.\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport enum RequestMethod {\n  Get,\n  Post,\n  Put,\n  Delete,\n  Options,\n  Head,\n  Patch\n}\n\n/**\n * All possible states in which a connection can be, based on\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\n * additional \"CANCELLED\" state.\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport enum ReadyState {\n  Unsent,\n  Open,\n  HeadersReceived,\n  Loading,\n  Done,\n  Cancelled\n}\n\n/**\n * Acceptable response types to be associated with a {@link Response}, based on\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport enum ResponseType {\n  Basic,\n  Cors,\n  Default,\n  Error,\n  Opaque\n}\n\n/**\n * Supported content type to be automatically associated with a {@link Request}.\n * @deprecated see https://angular.io/guide/http\n */\nexport enum ContentType {\n  NONE,\n  JSON,\n  FORM,\n  FORM_DATA,\n  TEXT,\n  BLOB,\n  ARRAY_BUFFER\n}\n\n/**\n * Define which buffer to use to store the response\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport enum ResponseContentType {\n  Text,\n  Json,\n  ArrayBuffer,\n  Blob\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Headers} from '@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class Headers {\n  /** @internal header names are lower case */\n  _headers: Map<string, string[]> = new Map();\n  /** @internal map lower case names to actual names */\n  _normalizedNames: Map<string, string> = new Map();\n\n  // TODO(vicb): any -> string|string[]\n  constructor(headers?: Headers|{[name: string]: any}|null) {\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach((values: string[], name: string) => {\n        values.forEach(value => this.append(name, value));\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach((name: string) => {\n      const values: string[] = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      this.delete(name);\n      values.forEach(value => this.append(name, value));\n    });\n  }\n\n  /**\n   * Returns a new Headers instance from the given DOMString of Response Headers\n   */\n  static fromResponseHeaderString(headersString: string): Headers {\n    const headers = new Headers();\n\n    headersString.split('\\n').forEach(line => {\n      const index = line.indexOf(':');\n      if (index > 0) {\n        const name = line.slice(0, index);\n        const value = line.slice(index + 1).trim();\n        headers.set(name, value);\n      }\n    });\n\n    return headers;\n  }\n\n  /**\n   * Appends a header to existing list of header values for a given header name.\n   */\n  append(name: string, value: string): void {\n    const values = this.getAll(name);\n\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  }\n\n  /**\n   * Deletes all header values for the given name.\n   */\n  delete (name: string): void {\n    const lcName = name.toLowerCase();\n    this._normalizedNames.delete(lcName);\n    this._headers.delete(lcName);\n  }\n\n  forEach(fn: (values: string[], name: string|undefined, headers: Map<string, string[]>) => void):\n      void {\n    this._headers.forEach(\n        (values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n  }\n\n  /**\n   * Returns first header that matches given name.\n   */\n  get(name: string): string|null {\n    const values = this.getAll(name);\n\n    if (values === null) {\n      return null;\n    }\n\n    return values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Checks for existence of header by given name.\n   */\n  has(name: string): boolean { return this._headers.has(name.toLowerCase()); }\n\n  /**\n   * Returns the names of the headers\n   */\n  keys(): string[] { return Array.from(this._normalizedNames.values()); }\n\n  /**\n   * Sets or overrides header value for given name.\n   */\n  set(name: string, value: string|string[]): void {\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n    this.mayBeSetNormalizedName(name);\n  }\n\n  /**\n   * Returns values of all headers.\n   */\n  values(): string[][] { return Array.from(this._headers.values()); }\n\n  /**\n   * Returns string of all headers.\n   */\n  // TODO(vicb): returns {[name: string]: string[]}\n  toJSON(): {[name: string]: any} {\n    const serialized: {[name: string]: string[]} = {};\n\n    this._headers.forEach((values: string[], name: string) => {\n      const split: string[] = [];\n      values.forEach(v => split.push(...v.split(',')));\n      serialized[this._normalizedNames.get(name) !] = split;\n    });\n\n    return serialized;\n  }\n\n  /**\n   * Returns list of header values for a given name.\n   */\n  getAll(name: string): string[]|null {\n    return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n  }\n\n  /**\n   * This method is not implemented.\n   */\n  entries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n\n  private mayBeSetNormalizedName(name: string): void {\n    const lcName = name.toLowerCase();\n\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {ResponseOptionsArgs} from './interfaces';\n\n\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {@link Response Responses} for\n * mock responses (see {@link MockBackend}).\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import {ResponseOptions, Response} from '@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class ResponseOptions {\n  // TODO: FormData | Blob\n  /**\n   * String, Object, ArrayBuffer or Blob representing the body of the {@link Response}.\n   */\n  body: string|Object|ArrayBuffer|Blob|null;\n  /**\n   * Http {@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n   * associated with the response.\n   */\n  status: number|null;\n  /**\n   * Response {@link Headers headers}\n   */\n  headers: Headers|null;\n  /**\n   * @internal\n   */\n  statusText: string|null;\n  /**\n   * @internal\n   */\n  type: ResponseType|null;\n  url: string|null;\n  constructor(opts: ResponseOptionsArgs = {}) {\n    const {body, status, headers, statusText, type, url} = opts;\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n\n  /**\n   * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n   * override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * This may be useful when sharing a base `ResponseOptions` object inside tests,\n   * where certain properties may change from test to test.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * import {ResponseOptions, Response} from '@angular/http';\n   *\n   * var options = new ResponseOptions({\n   *   body: {name: 'Jeff'}\n   * });\n   * var res = new Response(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('options.url:', options.url); // null\n   * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n   * console.log('res.url:', res.url); // https://google.com\n   * ```\n   */\n  merge(options?: ResponseOptionsArgs): ResponseOptions {\n    return new ResponseOptions({\n      body: options && options.body != null ? options.body : this.body,\n      status: options && options.status != null ? options.status : this.status,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      statusText: options && options.statusText != null ? options.statusText : this.statusText,\n      type: options && options.type != null ? options.type : this.type,\n      url: options && options.url != null ? options.url : this.url,\n    });\n  }\n}\n\n/**\n * Subclass of {@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link ResponseOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create {@link Response Responses}.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import {provide} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {@link Response}\n * object.\n *\n * ### Example\n *\n * ```\n * import {BaseResponseOptions, Response} from '@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class BaseResponseOptions extends ResponseOptions {\n  constructor() {\n    super({status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers()});\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {Request} from './static_request';\nimport {URLSearchParams} from './url_search_params';\n\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {@link Request}.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport abstract class ConnectionBackend { abstract createConnection(request: any): Connection; }\n\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport abstract class Connection {\n  // TODO(issue/24571): remove '!'.\n  readyState !: ReadyState;\n  // TODO(issue/24571): remove '!'.\n  request !: Request;\n  response: any;  // TODO: generic of <Response>;\n}\n\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport abstract class XSRFStrategy { abstract configureRequest(req: Request): void; }\n\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport interface RequestOptionsArgs {\n  url?: string|null;\n  method?: string|RequestMethod|null;\n  /** @deprecated from 4.0.0. Use params instead. */\n  search?: string|URLSearchParams|{[key: string]: any | any[]}|null;\n  params?: string|URLSearchParams|{[key: string]: any | any[]}|null;\n  headers?: Headers|null;\n  body?: any;\n  withCredentials?: boolean|null;\n  responseType?: ResponseContentType|null;\n}\n\n/**\n * Required structure when constructing new Request();\n */\nexport interface RequestArgs extends RequestOptionsArgs { url: string|null; }\n\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport interface ResponseOptionsArgs {\n  body?: string|Object|FormData|ArrayBuffer|Blob|null;\n  status?: number|null;\n  statusText?: string|null;\n  headers?: Headers|null;\n  type?: ResponseType|null;\n  url?: string|null;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RequestMethod} from './enums';\n\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n\nexport const isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n\nexport function getResponseURL(xhr: any): string|null {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n\nexport function stringToArrayBuffer8(input: String): ArrayBuffer {\n  const view = new Uint8Array(input.length);\n  for (let i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n\n\nexport function stringToArrayBuffer(input: String): ArrayBuffer {\n  const view = new Uint16Array(input.length);\n  for (let i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nfunction paramParser(rawParams: string = ''): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n          eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n **/\nexport class QueryEncoder {\n  encodeKey(key: string): string { return standardEncoding(key); }\n\n  encodeValue(value: string): string { return standardEncoding(value); }\n}\n\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class URLSearchParams {\n  paramsMap: Map<string, string[]>;\n  constructor(\n      public rawParams: string = '', private queryEncoder: QueryEncoder = new QueryEncoder()) {\n    this.paramsMap = paramParser(rawParams);\n  }\n\n  clone(): URLSearchParams {\n    const clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n\n  has(param: string): boolean { return this.paramsMap.has(param); }\n\n  get(param: string): string|null {\n    const storedParam = this.paramsMap.get(param);\n\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n\n  getAll(param: string): string[] { return this.paramsMap.get(param) || []; }\n\n  set(param: string, val: string) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    const list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  setAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n\n  append(param: string, val: string): void {\n    if (val === void 0 || val === null) return;\n    const list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `append(name, value)`\n  // for each value in `values`.\n  //\n  // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  appendAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const list = this.paramsMap.get(param) || [];\n      for (let i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `delete(name)`,\n  // followed by `set(name, values)`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  replaceAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (let i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n\n  toString(): string {\n    const paramsList: string[] = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(\n          v => paramsList.push(\n              this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n\n  delete (param: string): void { this.paramsMap.delete(param); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringToArrayBuffer} from './http_utils';\nimport {URLSearchParams} from './url_search_params';\n\n\n/**\n * HTTP request body used by both {@link Request} and {@link Response}\n * https://fetch.spec.whatwg.org/#body\n */\nexport abstract class Body {\n  /**\n   * @internal\n   */\n  protected _body: any;\n\n  /**\n   * Attempts to return body as parsed `JSON` object, or raises an exception.\n   */\n  json(): any {\n    if (typeof this._body === 'string') {\n      return JSON.parse(<string>this._body);\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n\n    return this._body;\n  }\n\n  /**\n   * Returns the body as a string, presuming `toString()` can be called on the response body.\n   *\n   * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n   * bytes in the buffer will be interpreted. Valid values are:\n   *\n   * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n   *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n   *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n   *   into consideration. This is the default behavior to avoid breaking apps, but should be\n   *   considered deprecated.\n   *\n   * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n   */\n  text(encodingHint: 'legacy'|'iso-8859' = 'legacy'): string {\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      switch (encodingHint) {\n        case 'legacy':\n          return String.fromCharCode.apply(null, new Uint16Array(this._body as ArrayBuffer));\n        case 'iso-8859':\n          return String.fromCharCode.apply(null, new Uint8Array(this._body as ArrayBuffer));\n        default:\n          throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n      }\n    }\n\n    if (this._body == null) {\n      return '';\n    }\n\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n\n    return this._body.toString();\n  }\n\n  /**\n   * Return the body as an ArrayBuffer\n   */\n  arrayBuffer(): ArrayBuffer {\n    if (this._body instanceof ArrayBuffer) {\n      return <ArrayBuffer>this._body;\n    }\n\n    return stringToArrayBuffer(this.text());\n  }\n\n  /**\n    * Returns the request's body as a Blob, assuming that body exists.\n    */\n  blob(): Blob {\n    if (this._body instanceof Blob) {\n      return <Blob>this._body;\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\nimport {ResponseOptions} from './base_response_options';\nimport {Body} from './body';\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\n\n\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class Response extends Body {\n  /**\n   * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n   *\n   * Defaults to \"default\".\n   */\n  type: ResponseType;\n  /**\n   * True if the response's status is within 200-299\n   */\n  ok: boolean;\n  /**\n   * URL of response.\n   *\n   * Defaults to empty string.\n   */\n  url: string;\n  /**\n   * Status code returned by server.\n   *\n   * Defaults to 200.\n   */\n  status: number;\n  /**\n   * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n   * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n   *\n   * Defaults to \"OK\"\n   */\n  statusText: string|null;\n  /**\n   * Non-standard property\n   *\n   * Denotes how many of the response body's bytes have been loaded, for example if the response is\n   * the result of a progress event.\n   */\n  // TODO(issue/24571): remove '!'.\n  bytesLoaded !: number;\n  /**\n   * Non-standard property\n   *\n   * Denotes how many bytes are expected in the final response body.\n   */\n  // TODO(issue/24571): remove '!'.\n  totalBytes !: number;\n  /**\n   * Headers object based on the `Headers` class in the [Fetch\n   * Spec](https://fetch.spec.whatwg.org/#headers-class).\n   */\n  headers: Headers|null;\n\n  constructor(responseOptions: ResponseOptions) {\n    super();\n    this._body = responseOptions.body;\n    this.status = responseOptions.status !;\n    this.ok = (this.status >= 200 && this.status <= 299);\n    this.statusText = responseOptions.statusText;\n    this.headers = responseOptions.headers;\n    this.type = responseOptions.type !;\n    this.url = responseOptions.url !;\n  }\n\n  toString(): string {\n    return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nlet _nextRequestId = 0;\nexport const JSONP_HOME = '__ng_jsonp__';\nlet _jsonpConnections: {[key: string]: any}|null = null;\n\nfunction _getJsonpConnections(): {[key: string]: any} {\n  const w: {[key: string]: any} = typeof window == 'object' ? window : {};\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n  return _jsonpConnections;\n}\n\n// Make sure not to evaluate this in a non-browser environment!\n@Injectable()\nexport class BrowserJsonp {\n  // Construct a <script> element with the specified URL\n  build(url: string): any {\n    const node = document.createElement('script');\n    node.src = url;\n    return node;\n  }\n\n  nextRequestID(): string { return `__req${_nextRequestId++}`; }\n\n  requestCallback(id: string): string { return `${JSONP_HOME}.${id}.finished`; }\n\n  exposeConnection(id: string, connection: any) {\n    const connections = _getJsonpConnections();\n    connections[id] = connection;\n  }\n\n  removeConnection(id: string) {\n    const connections = _getJsonpConnections();\n    connections[id] = null;\n  }\n\n  // Attach the <script> element to the DOM\n  send(node: any) { document.body.appendChild(<Node>(node)); }\n\n  // Remove <script> element from the DOM\n  cleanup(node: any) {\n    if (node.parentNode) {\n      node.parentNode.removeChild(<Node>(node));\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {ResponseOptions} from '../base_response_options';\nimport {ReadyState, RequestMethod, ResponseType} from '../enums';\nimport {Connection, ConnectionBackend} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\n\nimport {BrowserJsonp} from './browser_jsonp';\n\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class JSONPConnection implements Connection {\n  // TODO(issue/24571): remove '!'.\n  private _id !: string;\n  // TODO(issue/24571): remove '!'.\n  private _script !: Element;\n  private _responseData: any;\n  private _finished: boolean = false;\n\n  /**\n   * The {@link ReadyState} of this request.\n   */\n  // TODO(issue/24571): remove '!'.\n  readyState !: ReadyState;\n\n  /**\n   * The outgoing HTTP request.\n   */\n  request: Request;\n\n  /**\n   * An observable that completes with the response, when the request is finished.\n   */\n  response: Observable<Response>;\n\n  /** @internal */\n  constructor(\n      req: Request, private _dom: BrowserJsonp, private baseResponseOptions?: ResponseOptions) {\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n\n      this.readyState = ReadyState.Loading;\n      const id = this._id = _dom.nextRequestID();\n\n      _dom.exposeConnection(id, this);\n\n      // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n      const callback = _dom.requestCallback(this._id);\n      let url: string = req.url;\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n      }\n\n      const script = this._script = _dom.build(url);\n\n      const onLoad = (event: Event) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        if (!this._finished) {\n          let responseOptions =\n              new ResponseOptions({body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url});\n          if (baseResponseOptions) {\n            responseOptions = baseResponseOptions.merge(responseOptions);\n          }\n          responseObserver.error(new Response(responseOptions));\n          return;\n        }\n\n        let responseOptions = new ResponseOptions({body: this._responseData, url});\n        if (this.baseResponseOptions) {\n          responseOptions = this.baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n\n      const onError = (error: Error) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        let responseOptions = new ResponseOptions({body: error.message, type: ResponseType.Error});\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n\n      _dom.send(script);\n\n      return () => {\n        this.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n        this._dom.cleanup(script);\n      };\n    });\n  }\n\n  /**\n   * Callback called when the JSONP request completes, to notify the application\n   * of the new data.\n   */\n  finished(data?: any) {\n    // Don't leak connections\n    this._finished = true;\n    this._dom.removeConnection(this._id);\n    if (this.readyState === ReadyState.Cancelled) return;\n    this._responseData = data;\n  }\n}\n\n/**\n * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class JSONPBackend extends ConnectionBackend {\n  /** @internal */\n  constructor(private _browserJSONP: BrowserJsonp, private _baseResponseOptions: ResponseOptions) {\n    super();\n  }\n\n  createConnection(request: Request): JSONPConnection {\n    return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {ÃÂµgetDOM as getDOM} from '@angular/platform-browser';\nimport {Observable, Observer} from 'rxjs';\nimport {ResponseOptions} from '../base_response_options';\nimport {ContentType, ReadyState, RequestMethod, ResponseContentType, ResponseType} from '../enums';\nimport {Headers} from '../headers';\nimport {getResponseURL, isSuccess} from '../http_utils';\nimport {Connection, ConnectionBackend, XSRFStrategy} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\nimport {BrowserXhr} from './browser_xhr';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {@link MockConnection} may be interacted with in tests.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class XHRConnection implements Connection {\n  request: Request;\n  /**\n   * Response {@link EventEmitter} which emits a single {@link Response} value on load event of\n   * `XMLHttpRequest`.\n   */\n  response: Observable<Response>;\n  // TODO(issue/24571): remove '!'.\n  readyState !: ReadyState;\n  constructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions) {\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n      const _xhr: XMLHttpRequest = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      const onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = _xhr.status === 1223 ? 204 : _xhr.status;\n\n        let body: any = null;\n\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        const headers: Headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        const url = getResponseURL(_xhr) || req.url;\n        const statusText: string = _xhr.statusText || 'OK';\n\n        let responseOptions = new ResponseOptions({body, status, headers, statusText, url});\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        const response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      const onError = (err: ErrorEvent) => {\n        let responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText,\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach((values, name) => _xhr.setRequestHeader(name !, values.join(',')));\n\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n\n  setDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        const blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class CookieXSRFStrategy implements XSRFStrategy {\n  constructor(\n      private _cookieName: string = 'XSRF-TOKEN', private _headerName: string = 'X-XSRF-TOKEN') {}\n\n  configureRequest(req: Request): void {\n    const xsrfToken = getDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n\n/**\n * Creates {@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\n * @Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class XHRBackend implements ConnectionBackend {\n  constructor(\n      private _browserXHR: BrowserXhr, private _baseResponseOptions: ResponseOptions,\n      private _xsrfStrategy: XSRFStrategy) {}\n\n  createConnection(request: Request): XHRConnection {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestOptionsArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n\n\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class RequestOptions {\n  /**\n   * Http method with which to execute a {@link Request}.\n   * Acceptable methods are defined in the {@link RequestMethod} enum.\n   */\n  method: RequestMethod|string|null;\n  /**\n   * {@link Headers} to be attached to a {@link Request}.\n   */\n  headers: Headers|null;\n  /**\n   * Body to be used when creating a {@link Request}.\n   */\n  body: any;\n  /**\n   * Url with which to perform a {@link Request}.\n   */\n  url: string|null;\n  /**\n   * Search parameters to be included in a {@link Request}.\n   */\n  params: URLSearchParams;\n  /**\n   * @deprecated from 4.0.0. Use params instead.\n   */\n  get search(): URLSearchParams { return this.params; }\n  /**\n   * @deprecated from 4.0.0. Use params instead.\n   */\n  set search(params: URLSearchParams) { this.params = params; }\n  /**\n   * Enable use credentials for a {@link Request}.\n   */\n  withCredentials: boolean|null;\n  /*\n   * Select a buffer to store the response, such as ArrayBuffer, Blob, Json (or Document)\n   */\n  responseType: ResponseContentType|null;\n\n  // TODO(Dzmitry): remove search when this.search is removed\n  constructor(opts: RequestOptionsArgs = {}) {\n    const {method, headers, body, url, search, params, withCredentials, responseType} = opts;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n\n  /**\n   * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * Note that `headers` and `search` will override existing values completely if present in\n   * the `options` object. If these values should be merged, it should be done prior to calling\n   * `merge` on the `RequestOptions` instance.\n   *\n   * ```typescript\n   * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n   *\n   * const options = new RequestOptions({\n   *   method: RequestMethod.Post\n   * });\n   * const req = new Request(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('req.method:', RequestMethod[req.method]); // Post\n   * console.log('options.url:', options.url); // null\n   * console.log('req.url:', req.url); // https://google.com\n   * ```\n   */\n  merge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                                                                    this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType :\n                                                              this.responseType\n    });\n  }\n\n  private _mergeSearchParams(params?: string|URLSearchParams|{[key: string]: any | any[]}|\n                             null): URLSearchParams {\n    if (!params) return this.params;\n\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n\n    return this._parseParams(params);\n  }\n\n  private _parseParams(objParams: {[key: string]: any | any[]} = {}): URLSearchParams {\n    const params = new URLSearchParams();\n    Object.keys(objParams).forEach((key: string) => {\n      const value: any|any[] = objParams[key];\n      if (Array.isArray(value)) {\n        value.forEach((item: any) => this._appendParam(key, item, params));\n      } else {\n        this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  }\n\n  private _appendParam(key: string, value: any, params: URLSearchParams): void {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    params.append(key, value);\n  }\n}\n\n/**\n * Subclass of {@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {@link RequestMethod RequestMethod.Get}\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link RequestOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create and send {@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class BaseRequestOptions extends RequestOptions {\n  constructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Body} from './body';\nimport {ContentType, RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n\n\n// TODO(jeffbcross): properly implement body accessors\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {@link Http} and\n * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\n *\n * @Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class Request extends Body {\n  /**\n   * Http method with which to perform the request.\n   */\n  method: RequestMethod;\n  /**\n   * {@link Headers} instance\n   */\n  headers: Headers;\n  /** Url of the remote resource */\n  url: string;\n  /** Type of the request body **/\n  private contentType: ContentType;\n  /** Enable use credentials */\n  withCredentials: boolean;\n  /** Buffer to store the response */\n  responseType: ResponseContentType;\n  constructor(requestOptions: RequestArgs) {\n    super();\n    // TODO: assert that url is present\n    const url = requestOptions.url;\n    this.url = requestOptions.url !;\n    const paramsArg = requestOptions.params || requestOptions.search;\n    if (paramsArg) {\n      let params: string;\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n      if (params.length > 0) {\n        let prefix = '?';\n        if (this.url.indexOf('?') != -1) {\n          prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        this.url = url + prefix + params;\n      }\n    }\n    this._body = requestOptions.body;\n    this.method = normalizeMethodName(requestOptions.method !);\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    this.headers = new Headers(requestOptions.headers);\n    this.contentType = this.detectContentType();\n    this.withCredentials = requestOptions.withCredentials !;\n    this.responseType = requestOptions.responseType !;\n  }\n\n  /**\n   * Returns the content type enum based on header options.\n   */\n  detectContentType(): ContentType {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n      case 'application/octet-stream':\n        return this._body instanceof ArrayBuffer ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  }\n\n  /**\n   * Returns the content type of request's body based on its type.\n   */\n  detectContentTypeFromBody(): ContentType {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body === 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n\n  /**\n   * Returns the request's body according to its type. If body is undefined, return\n   * null.\n   */\n  getBody(): any {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  }\n}\n\nfunction urlEncodeParams(params: {[key: string]: any}): URLSearchParams {\n  const searchParams = new URLSearchParams();\n  Object.keys(params).forEach(key => {\n    const value = params[key];\n    if (value && Array.isArray(value)) {\n      value.forEach(element => searchParams.append(key, element.toString()));\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\n\nconst noop = function() {};\nconst w = typeof window == 'object' ? window : noop;\nconst FormData = (w as any /** TODO #9100 */)['FormData'] || noop;\nconst Blob = (w as any /** TODO #9100 */)['Blob'] || noop;\nexport const ArrayBuffer: ArrayBufferConstructor =\n    (w as any /** TODO #9100 */)['ArrayBuffer'] || noop;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {RequestMethod} from './enums';\nimport {ConnectionBackend, RequestArgs, RequestOptionsArgs} from './interfaces';\nimport {Request} from './static_request';\nimport {Response} from './static_response';\n\nfunction httpRequest(backend: ConnectionBackend, request: Request): Observable<Response> {\n  return backend.createConnection(request).response;\n}\n\nfunction mergeOptions(\n    defaultOpts: BaseRequestOptions, providedOpts: RequestOptionsArgs | undefined,\n    method: RequestMethod, url: string): RequestArgs {\n  const newOptions = defaultOpts;\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      params: providedOpts.params,\n      headers: providedOpts.headers,\n      body: providedOpts.body,\n      withCredentials: providedOpts.withCredentials,\n      responseType: providedOpts.responseType\n    })) as RequestArgs;\n  }\n\n  return newOptions.merge(new RequestOptions({method, url})) as RequestArgs;\n}\n\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {@link Response} when a\n * response is received.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '@angular/http';\n * import {map} from 'rxjs/operators';\n *\n * @Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .pipe(map(res => res.json()))\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '@angular/http';\n * import {MockBackend} from '@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class Http {\n  constructor(protected _backend: ConnectionBackend, protected _defaultOptions: RequestOptions) {}\n\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {@link BaseRequestOptions} before performing the request.\n   */\n  request(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let responseObservable: any;\n    if (typeof url === 'string') {\n      responseObservable = httpRequest(\n          this._backend,\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, <string>url)));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n\n  /**\n   * Performs a request with `get` http method.\n   */\n  get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n  }\n\n  /**\n   * Performs a request with `post` http method.\n   */\n  post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Post,\n        url)));\n  }\n\n  /**\n   * Performs a request with `put` http method.\n   */\n  put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Put,\n        url)));\n  }\n\n  /**\n   * Performs a request with `delete` http method.\n   */\n  delete (url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n  }\n\n  /**\n   * Performs a request with `patch` http method.\n   */\n  patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Patch,\n        url)));\n  }\n\n  /**\n   * Performs a request with `head` http method.\n   */\n  head(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n  }\n\n  /**\n   * Performs a request with `options` http method.\n   */\n  options(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n  }\n}\n\n\n/**\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class Jsonp extends Http {\n  constructor(backend: ConnectionBackend, defaultOptions: RequestOptions) {\n    super(backend, defaultOptions);\n  }\n\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {@link BaseRequestOptions} before performing the request.\n   *\n   * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n   * supported by all current browsers. Because JSONP creates a `<script>` element with\n   * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n   * source could expose your application to XSS risks. Data exposed by JSONP may also be\n   * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n   * future security issues (e.g. content sniffing).  For more detail, see the\n   * [Security Guide](http://g.co/ng/security).\n   */\n  request(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let responseObservable: any;\n    if (typeof url === 'string') {\n      url =\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, <string>url));\n    }\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        throw new Error('JSONP requests must use GET request method.');\n      }\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\nimport {NgModule} from '@angular/core';\n\nimport {BrowserJsonp} from './backends/browser_jsonp';\nimport {BrowserXhr} from './backends/browser_xhr';\nimport {JSONPBackend} from './backends/jsonp_backend';\nimport {CookieXSRFStrategy, XHRBackend} from './backends/xhr_backend';\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nimport {Http, Jsonp} from './http';\nimport {XSRFStrategy} from './interfaces';\n\n\nexport function _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n  return new Http(xhrBackend, requestOptions);\n}\n\nexport function jsonpFactory(jsonpBackend: JSONPBackend, requestOptions: RequestOptions): Jsonp {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n\n\n/**\n * The module that includes http's providers\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@NgModule({\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions]},\n    BrowserXhr,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    XHRBackend,\n    {provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy},\n  ],\n})\nexport class HttpModule {\n}\n\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated see https://angular.io/api/common/http/HttpClient#jsonp\n * @publicApi\n */\n@NgModule({\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions]},\n    BrowserJsonp,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    JSONPBackend,\n  ],\n})\nexport class JsonpModule {\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\nimport {Version} from '@angular/core';\n/**\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport const VERSION = new Version('7.2.16');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {BrowserXhr} from './backends/browser_xhr';\nexport {JSONPBackend, JSONPConnection} from './backends/jsonp_backend';\nexport {CookieXSRFStrategy, XHRBackend, XHRConnection} from './backends/xhr_backend';\nexport {BaseRequestOptions, RequestOptions} from './base_request_options';\nexport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nexport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nexport {Headers} from './headers';\nexport {Http, Jsonp} from './http';\nexport {HttpModule, JsonpModule} from './http_module';\nexport {Connection, ConnectionBackend, RequestOptionsArgs, ResponseOptionsArgs, XSRFStrategy} from './interfaces';\nexport {Request} from './static_request';\nexport {Response} from './static_response';\nexport {QueryEncoder, URLSearchParams} from './url_search_params';\nexport {VERSION} from './version';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/index';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {BrowserJsonp as ÃÂµangular_packages_http_http_e} from './src/backends/browser_jsonp';\nexport {Body as ÃÂµangular_packages_http_http_f} from './src/body';\nexport {_createDefaultCookieXSRFStrategy as ÃÂµangular_packages_http_http_a,httpFactory as ÃÂµangular_packages_http_http_b,jsonpFactory as ÃÂµangular_packages_http_http_c} from './src/http_module';\nexport {RequestArgs as ÃÂµangular_packages_http_http_d} from './src/interfaces';"]},"metadata":{},"sourceType":"module","externalDependencies":[]}